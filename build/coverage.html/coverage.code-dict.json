{"/home/travis/build/npmtest/node-npmtest-winston-elasticsearch/test.js":"/* istanbul instrument in package npmtest_winston_elasticsearch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-elasticsearch/lib.npmtest_winston_elasticsearch.js":"/* istanbul instrument in package npmtest_winston_elasticsearch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_winston_elasticsearch = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_winston_elasticsearch = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-elasticsearch/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-winston-elasticsearch && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_winston_elasticsearch */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_winston_elasticsearch\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_winston_elasticsearch.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_winston_elasticsearch.rollup.js'] =\n            local.assetsDict['/assets.npmtest_winston_elasticsearch.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_winston_elasticsearch.__dirname + '/lib.npmtest_winston_elasticsearch.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-winston-elasticsearch/node_modules/winston-elasticsearch/index.js":"'use strict';\n\nconst util = require('util');\nconst Promise = require('promise');\nconst stream = require('stream');\nconst winston = require('winston');\nconst moment = require('moment');\nconst _ = require('lodash');\nconst retry = require('retry');\nconst elasticsearch = require('elasticsearch');\n\nconst defaultTransformer = require('./transformer');\nconst BulkWriter = require('./bulk_writer');\n\n/**\n * Constructor\n */\nconst Elasticsearch = function Elasticsearch(options) {\n  this.options = options || {};\n  if (!options.timestamp) {\n    this.options.timestamp = function timestamp() { return new Date().toISOString(); };\n  }\n  // Enforce context\n  if (!(this instanceof Elasticsearch)) {\n    return new Elasticsearch(options);\n  }\n\n  // Set defaults\n  const defaults = {\n    level: 'info',\n    index: null,\n    indexPrefix: 'logs',\n    indexSuffixPattern: 'YYYY.MM.DD',\n    messageType: 'log',\n    transformer: defaultTransformer,\n    ensureMappingTemplate: true,\n    flushInterval: 2000,\n    waitForActiveShards: 1,\n    handleExceptions: false\n  };\n  _.defaults(options, defaults);\n  winston.Transport.call(this, options);\n\n  // Use given client or create one\n  if (options.client) {\n    this.client = options.client;\n  } else {\n    // As we don't want to spam stdout, create a null stream\n    // to eat any log output of the ES client\n    const NullStream = function NullStream() {\n      stream.Writable.call(this);\n    };\n    util.inherits(NullStream, stream.Writable);\n    // eslint-disable-next-line no-underscore-dangle\n    NullStream.prototype._write = function _write(chunk, encoding, next) {\n      next();\n    };\n\n    const defaultClientOpts = {\n      clientOpts: {\n        log: [\n          {\n            type: 'stream',\n            level: 'error',\n            stream: new NullStream()\n          }\n        ]\n      }\n    };\n    _.defaults(options, defaultClientOpts);\n\n    // Create a new ES client\n    // http://localhost:9200 is the default of the client already\n    this.client = new elasticsearch.Client(this.options.clientOpts);\n  }\n\n  this.bulkWriter = new BulkWriter(this.client,\n      options.flushInterval, options.waitForActiveShards);\n  this.bulkWriter.start();\n\n  // Conduct initial connection check (sets connection state for further use)\n  this.checkEsConnection().then((connectionOk) => {});\n\n  return this;\n};\n\nutil.inherits(Elasticsearch, winston.Transport);\n\nElasticsearch.prototype.name = 'elasticsearch';\n\n/**\n * log() method\n */\nElasticsearch.prototype.log = function log(level, message, meta, callback) {\n  const logData = {\n    message,\n    level,\n    meta,\n    timestamp: this.options.timestamp()\n  };\n  const entry = this.options.transformer(logData);\n\n  this.bulkWriter.append(\n    this.getIndexName(this.options),\n    this.options.messageType,\n    entry\n  );\n\n  callback(); // write is deferred, so no room for errors here :)\n};\n\nElasticsearch.prototype.getIndexName = function getIndexName(options) {\n  let indexName = options.index;\n  if (indexName === null) {\n    const now = moment();\n    const dateString = now.format(options.indexSuffixPattern);\n    indexName = options.indexPrefix + '-' + dateString;\n  }\n  return indexName;\n};\n\nElasticsearch.prototype.checkEsConnection = function checkEsConnection() {\n  const thiz = this;\n  thiz.esConnection = false;\n\n  const operation = retry.operation({\n    retries: 3,\n    factor: 3,\n    minTimeout: 1 * 1000,\n    maxTimeout: 60 * 1000,\n    randomize: false\n  });\n\n  return new Promise((fulfill, reject) => {\n    operation.attempt((currentAttempt) => {\n      thiz.client.ping().then(\n        (res) => {\n          thiz.esConnection = true;\n          // Ensure mapping template is existing if desired\n          if (thiz.options.ensureMappingTemplate) {\n            thiz.ensureMappingTemplate(fulfill, reject);\n          } else {\n            fulfill(true);\n          }\n        },\n        (err) => {\n          if (operation.retry(err)) {\n            return;\n          }\n          thiz.esConnection = false;\n          thiz.emit('error', err);\n          reject(false);\n        });\n    });\n  });\n};\n\nElasticsearch.prototype.search = function search(q) {\n  const index = this.getIndexName(this.options);\n  const query = {\n    index,\n    q\n  };\n  return this.client.search(query);\n};\n\nElasticsearch.prototype.ensureMappingTemplate = function ensureMappingTemplate(fulfill, reject) {\n  const thiz = this;\n  let mappingTemplate = thiz.options.mappingTemplate;\n  if (mappingTemplate === null || typeof mappingTemplate === 'undefined') {\n    // eslint-disable-next-line import/no-unresolved, import/no-extraneous-dependencies\n    mappingTemplate = require('index-template-mapping.json');\n  }\n  const tmplCheckMessage = {\n    name: 'template_' + thiz.options.indexPrefix\n  };\n  thiz.client.indices.getTemplate(tmplCheckMessage).then(\n    (res) => {\n      fulfill(res);\n    },\n    (res) => {\n      if (res.status && res.status === 404) {\n        const tmplMessage = {\n          name: 'template_' + thiz.options.indexPrefix,\n          create: true,\n          body: mappingTemplate\n        };\n        thiz.client.indices.putTemplate(tmplMessage).then(\n        (res1) => {\n          fulfill(res1);\n        },\n        (err1) => {\n          reject(err1);\n        });\n      }\n    });\n};\n\nmodule.exports = winston.transports.Elasticsearch = Elasticsearch;\n","/home/travis/build/npmtest/node-npmtest-winston-elasticsearch/node_modules/winston-elasticsearch/transformer.js":"/**\n Transformer function to transform log data as provided by winston into\n a message structure which is more appropriate for indexing in ES.\n\n @param {Object} logData\n @param {Object} logData.message - the log message\n @param {Object} logData.level - the log level\n @param {Object} logData.meta - the log meta data\n @returns {Object} transformed message\n */\nconst transformer = function transformer(logData) {\n  const transformed = {};\n  transformed['@timestamp'] = logData.timestamp ? logData.timestamp : new Date().toISOString();\n  transformed.message = logData.message;\n  transformed.severity = logData.level;\n  transformed.fields = logData.meta;\n  return transformed;\n};\n\nmodule.exports = transformer;\n","/home/travis/build/npmtest/node-npmtest-winston-elasticsearch/node_modules/winston-elasticsearch/bulk_writer.js":"const Promise = require('promise');\nconst debug = require('debug')('bulk writer');\n\nconst BulkWriter = function BulkWriter(client, interval, waitForActiveShards) {\n  this.client = client;\n  this.interval = interval || 5000;\n  this.waitForActiveShards = waitForActiveShards;\n\n  this.bulk = []; // bulk to be flushed\n  this.running = false;\n  this.timer = false;\n  debug('created', this);\n};\n\nBulkWriter.prototype.start = function start() {\n  this.stop();\n  this.running = true;\n  this.tick();\n  debug('started');\n};\n\nBulkWriter.prototype.stop = function stop() {\n  this.running = false;\n  if (!this.timer) { return; }\n  clearTimeout(this.timer);\n  this.timer = null;\n  debug('stopped');\n};\n\nBulkWriter.prototype.schedule = function schedule() {\n  const thiz = this;\n  this.timer = setTimeout(() => {\n    thiz.tick();\n  }, this.interval);\n};\n\nBulkWriter.prototype.tick = function tick() {\n  debug('tick');\n  const thiz = this;\n  if (!this.running) { return; }\n  this.flush()\n  .catch((e) => {\n    throw e;\n  })\n  .then(() => {\n    thiz.schedule();\n  });\n};\n\nBulkWriter.prototype.flush = function flush() {\n  // write bulk to elasticsearch\n  const thiz = this;\n  if (this.bulk.length === 0) {\n    debug('nothing to flush');\n\n    return new Promise((resolve) => {\n      return resolve();\n    });\n  }\n\n  const bulk = this.bulk.concat();\n  this.bulk = [];\n  debug('going to write', bulk);\n  return this.client.bulk({\n    body: bulk,\n    waitForActiveShards: this.waitForActiveShards,\n    timeout: this.interval + 'ms',\n    type: this.type\n  }).catch((e) => {\n    // rollback this.bulk array\n    thiz.bulk = bulk.concat(thiz.bulk);\n    throw e;\n  });\n};\n\nBulkWriter.prototype.append = function append(index, type, doc) {\n  this.bulk.push({\n    index: {\n      _index: index, _type: type\n    }\n  });\n  this.bulk.push(doc);\n};\n\nmodule.exports = BulkWriter;\n"}